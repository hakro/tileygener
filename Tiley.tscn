[gd_scene load_steps=32 format=2]

[ext_resource path="res://Tiley.gd" type="Script" id=1]
[ext_resource path="res://fonts/Roboto-Regular.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://fonts/Roboto-Bold.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://GenerInspector.gd" type="Script" id=4]
[ext_resource path="res://geners/random_pixels.gd" type="Script" id=5]
[ext_resource path="res://geners/fixed_set_attractors.gd" type="Script" id=6]
[ext_resource path="res://fonts/Roboto-Light.ttf" type="DynamicFontData" id=7]
[ext_resource path="res://fonts/Roboto-BoldItalic.ttf" type="DynamicFontData" id=8]
[ext_resource path="res://fonts/Inconsolata-Regular.ttf" type="DynamicFontData" id=9]
[ext_resource path="res://Palettes.gd" type="Script" id=10]
[ext_resource path="res://fonts/Roboto-RegularItalic.ttf" type="DynamicFontData" id=11]
[ext_resource path="res://geners/cellular_automata.gd" type="Script" id=12]
[ext_resource path="res://geners/spirograph.gd" type="Script" id=13]
[ext_resource path="res://geners/diamond_square.gd" type="Script" id=14]
[ext_resource path="res://Sprites.gd" type="Script" id=16]

[sub_resource type="StyleBoxFlat" id=1]
bg_color = Color( 0, 0, 0, 1 )

[sub_resource type="DynamicFont" id=2]
font_data = ExtResource( 2 )

[sub_resource type="Theme" id=3]
default_font = SubResource( 2 )

[sub_resource type="DynamicFont" id=4]
font_data = ExtResource( 2 )

[sub_resource type="Theme" id=5]
default_font = SubResource( 4 )

[sub_resource type="StyleBoxFlat" id=6]
bg_color = Color( 0.110757, 0.110757, 0.166016, 1 )

[sub_resource type="DynamicFont" id=7]
size = 18
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=8]
size = 14
font_data = ExtResource( 7 )

[sub_resource type="StyleBoxFlat" id=9]
bg_color = Color( 0.109804, 0.109804, 0.164706, 1 )

[sub_resource type="DynamicFont" id=10]
size = 14
font_data = ExtResource( 7 )

[sub_resource type="DynamicFont" id=11]
font_data = ExtResource( 9 )

[sub_resource type="DynamicFont" id=12]
font_data = ExtResource( 8 )

[sub_resource type="DynamicFont" id=13]
font_data = ExtResource( 11 )

[sub_resource type="DynamicFont" id=14]
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=15]
font_data = ExtResource( 2 )

[sub_resource type="StyleBoxFlat" id=16]
bg_color = Color( 0.109804, 0.109804, 0.164706, 1 )

[node name="Tiley" type="Node"]
script = ExtResource( 1 )

[node name="Palettes" type="Node" parent="."]
script = ExtResource( 10 )

[node name="Sprites" type="PanelContainer" parent="."]
margin_right = 1080.0
margin_bottom = 1080.0
custom_styles/panel = SubResource( 1 )
script = ExtResource( 16 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="SaveDialog" type="FileDialog" parent="."]
margin_right = 502.0
margin_bottom = 309.0
rect_min_size = Vector2( 300, 105 )
theme = SubResource( 3 )
popup_exclusive = true
window_title = "Save Image"
resizable = true
mode_overrides_title = false
filters = PoolStringArray( "*.png;PNG Images" )
current_dir = "res://save"
current_file = "r"
current_path = "res://save/r"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Gener" type="Node" parent="."]

[node name="random_pixels" type="Node" parent="Gener"]
script = ExtResource( 5 )
gener_name = "Random Pixels"
gener_description = "[u][b]DESCRIPTION[/b][/u]

Fill a tile with one or more passes of random pixels. Colors can be random, or a specific color can be assigned to each pass. The number of pixels generated for a pass can be controlled. The distribution of the random pixels can be modified by using \"dice\" to generate the random numbers.

[u][b]Colors[/b][/u]

[i]Per Pass (Random)[/i] chooses a random color for each pass. If any palette colors are selected the random color is chosen from among them, otherwise the random color is chosen from among all possible colors. Randomly chosen colors use alpha = 1.0 unless [i]Use Random Color Alpha[/i] is checked, in which case alpha is also random. [i]Per Pass (Ordered)[/i] uses the palette colors, in order, for each pass. If no palette colors are selected, the behavior is the same as [i]Per Pass (Random)[/i]. [i]Per Pixel[/i] assigns a random color to each pixel, choosing from the palette colors if availble, or all colors if no palette colors are selected. [i]Intensity[/i] works like [i]Per Pass (Random)[/i] except pixels are given increasing alpha values across 16 intensities each time they are reused. [i]Intensity Palette[/i] is similar, except that it uses the selected palette colors for increasing intensity.

[u][b]\"Dice\"[/b][/u]

Random pixels are generated using the concept of rolling [i]n[/i] dice with [i]pixels[/i] / [i]n[/i] sides, where [i]pixels[/i] is the pixel dimensin of the image tile being generated. For example, for a tile of 128 pixels with the default of 1 die, the random x or y position is generated by \"rolling\" a single 128-sided die, resultin in pixels that spread more-or-less uniformly across the pixel range. If 2 dice are used, each die will have 128 / 2 = 64 sides. Rollding two 64-sided dice will generated random numbers across the pixel range, but with a tendency to be more centralized. The greater the number of dice, the greater the central tendency.

[u][b]Symmetry[/b][/u]

Options

Three symmetry options are available, [i]Vertical[/i], [i]Horizontal[/i], and [i]Both[/i]. Vertical symmetry generates the random pixels over the left half of the tile and then mirrors it to the right side of the tile. Horizontal symmetry generates the random pixels over the top half of the tile and then mirrors it to the bottom half of the tile. Choose [i]Both[/i] generates the random pixels in the upper left quadrant and then mirrors it to the other four quadrants.

Style

[i]Full[/i] style treats the area over which pixels are being generated, e.g. the upper left quadrant or the top half, as the entire image for the purpose of generating pixels. Thus, if a number of dice are in use which causes pixels to cluster centrally, in [i]Full[/i] style they will cluster near the center of the pixel region that will eventually be mirrored. [i]Slice[/i] instead generates pixels across the entire image as usual, and then \"slices\" out the region to be mirrored, and mirrors it using whatever symmetry is active."

[node name="fixed_set_attractors" type="Node" parent="Gener"]
script = ExtResource( 6 )
gener_name = "Fixed Set of Attractors"
gener_description = "[u][b]DESCRIPTION[/b][/u]

Images are generated by first creating a set of fixed points, each with an attraction strength. One of the fixed points is chosen at random as the starting pixel. The next pixel is generated by choosing any one of the other fixed points at random, and moving toward it by the distance specified by the new point's attraction value. For example, if the attraction value is 0.5, the new pixel will be exactly halfway between the current position and the new pixel. This process is repeated until the desired number of pixels has been generated.

[i]The default setup can result in a special case: three fixed points uniformly distributed along the edge of a circle, with each point having an attraction of 0.5. The result is a fractal known as the [url=https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle][color=aqua]Sierpi≈Ñski triangle[/color][/url].[/i]

[u][b]Phase 1: Fixed Point Generation[/b][/u]

The position of each fixed point is established by its angle and radius relative to the center of the tile. There are several options to control how the set of fixed points are generated and their attraction values:

[table=2]

[cell]Angle[/cell]
[cell]Points will be distributed between the minimum and maximum angle. The distribution can be uniform along the arc, or randomly placed on the arc.[/cell]

[cell]Radius[/cell]
[cell]Radius is specified as a fraction of the image size. For example, if the image is 256 pixels, a radius of 1.0 would be 128 pixels, 0.5 would be 64 pixels, etc. The radius of each point can be set either to fixed, uniform, or random. Fixed chooses a radius in the radius range and all points in the image are set to the specified radius. Uniform spreads the point radii uniformly from the minimum to the maximum across the range of possible radius values. Random chooses a random radius, within the radius range, for every point.[/cell]

[cell]Attraction [/cell]
[cell]Attraction is defined as a fraction of the straight line distance between the current pixel and the fixed point. See the text below under Pixel Generation for a more complete discussion of attraction. Attraction values can be fixed, uniform, and random, similar to radius values. A fixed attraction chooses a random attraction value from the allowed range and all fixed points in the image are set to this same attraction. Uniform spreads the attraction uniformly from the minimum to the maximum across the range of possible attraction values. Random chooses a random attraction, within the possible range of values, for each point. Finally, it is possible to directly set the attraction values for the points.[/cell]

[/table]

[u][b]Phase 1: Pixel Generation[/b][/u]

A starting pixel is selected randomly from among the set of fixed points. The next pixel is generated by choosing any one of the other fixed points at random, and moving toward it by the distance specified by the new point's attraction value.This process is repeated until the desired number of pixels has been generated.

Attraction works by considering the straight line between the current pixel and randomly selected fixed point. The new pixel will be selected by moving toward the fixed point a distance equal to the distance between them multiplied by the attraction value of the fixed point. For example, an attraction value of 0.5 would move exactly halfway between the current pixel and the new point. An attraction value of 0.0 would mean the current point doesn't move at all for the next pixel. An attraction value of 1.0 would mean that the next pixel will end up directly on top of the fixed point. Attraction values are possible outside the range of 0.0 to 1.0, and indeed may be any real number. An attraction value greater than 1.0 means the next pixel will move toward the fixed point and then [i]beyond[/i] it. A negative attraction is, in effect, repulsion, and will cause the new pixel to move directly [i]away[/i] from the fixed point."

[node name="cellular_automata" type="Node" parent="Gener"]
script = ExtResource( 12 )
gener_name = "Cellular Automata"
gener_description = "[u][b]DESCRIPTION[/b][/u]

The tile is initialized to a random collection of points, and then one or more passes of a 2D 3x3 [url=https://en.wikipedia.org/wiki/Cellular_automaton][color=aqua]cellular automaton[/color][/url] rule is run on the points. In simple terms, for each pixel, it's eight neighbors are examined, and the number of \"on\" or \"alive\" neighbors is counted. Based on that count, and whether the center is pixel is itself on or off, the automaton rule specifies whether this pixel should be on or off in the next generation.

[u][b]Start Pixels[/b][/u]

The starting pixels is just a simple random pixel generator. You can specify a range of pixels, by default there will be at least 500 but no more than 1000, and you can give the random pixels central tendency by increasing the number of \"dice\" used for the random numbers, in exactly the same manner as the Random Pixels generator.

[u][b]Rules[/b][/u]

Rules are composed of two  strings. The \"State 0\" rule string specify the rules for pixels that are off, and the \"State 1\" string for pixels that are on. Each rule string is 9 characters in length, and must be a 0 or 1. The first position in the string is the rule for the next generation when the pixel is found to have 0 neigbors. The second position in the string specifies the rule if the pixel is found to have 1 neighbor. Each position in the string specifies the value of the pixel in the next generation for that specific number of neighbors.

For example, if the State 0 rule is \"000100000\", then there is only one condition where an off cell will ever turn on: when it has precisely three on (i.e. live) neighbors. If the State 1 rule is \"001100000\", then an on pixel will turn off (i.e. die) unless it has exactly two or three neighbors. This example set of rules is actually [url=https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life][color=aqua]Conway's Game of Life[/color][/url], and the default ruleset for this generator is a slight variation of Conway's rules.

All tiles are generated with the specified rules unless [i]Use Random Automata[/i] is checked, in which case every tile is generated from a random ruleset.

[u][b]Generations[/b][/u]

A single generation means that the ruleset is run once on the entire image. A second generation would be run on the result of the first generation, and so on. The default setting choose from a range of 1 to 8 generations for a tile.

[u][b]Colors[/b][/u]

[i]Image[/i] chooses a random color for each image generated, choosing from the palette colors if available, or from all colors if there is no palette. [i]Pixel[/i] chooses a random color for each pixel, also choosing from the palette colors if available, or from all colors if there is no palette. [i]Generation Intensity[/i] chooses a color similar to [i]Image[/i], but colors each generation with a brighter intensity, with brightness spread evenly across the number of generations. Finally, [i]Generation Palette[/i] works like [i]Generation Intensity[/i], but instead of increasing the brightness, colors are selected in order from the palette."

[node name="diamond_square" type="Node" parent="Gener"]
script = ExtResource( 14 )
gener_name = "Diamond-Square Algorithm"
gener_description = "[u][b]DESCRIPTION[/b][/u]

The [url=https://en.wikipedia.org/wiki/Diamond-square_algorithm][color=aqua]Diamond-Square Algorithm[/color][/url] is a fractal heightmap algorithm. The algorithm has a tendency to create artifacts along major rows and diagonals, and there are better noise-based terrain generators now in existence, but the diamond-square algorithm is easy to implement and produces some very nice results for the minimal effort.

The algorithm works by taking a square arrangement of pixels and seeding the four corner pixels to some height value, either chosen at random or chosen to achieve a specific desired overall shape. The pixel at the very center of those four corner points is then set to to the average of the four corners (the \"diamond\" step). Next, the pixels halfway between each pair of adjacent corner points are then set to the average of the two corner points, the pixel just set in the square step, and the pixel that mirrors the square step pixel in the other direction. At the edges of the image this mirror pixel may not exist, and the general approach is to \"wrap\" around to the other side of the image in this situation, which makes for images that can be tiled in the plane.

The original square image is now four \"sub\" images over which the algorithm is then performed on each of these smaller section, and the next pass will have 16 sub images, etc., and this continues until the final block is just a 3x3 array of pixels. At each level, the magnitude of the random number added to each averge is decreased slightly.

[u][b]Generator Options[/b][/u]

The default settings will choose random seeds for each corner, but you can also specify the seeds directly. You can change the number of times the algorithm is run over a given image. Two passes seems to be ideal for achieving a decent result. The rate at which the random number generator falls off can be adjusted with the [i]Random Falloff[/i] option. A value of 0.0 would mean no falloff at all, and a rate of 1.0 means that there is no randomness in the generated image, the result arises strictly from the seed values.

[u][b]Colors[/b][/u]

If no palette colors are selected, levels of increasing height will be indicated by randomly chosen color palette. The default setting will choose 16 random colors and assign that palette to the appropriate range of height values. If the setting is for a single color, the height values in the image will instead be output as alpha values over the monotone image.

If a palette is active, height value are mapped evenly across the palette, with 0.0 being mapped to the first palette color, and 1.0 being mapped to the other end of the palette, and the remaining colors distributed evenly across the range of height values. Smoothing, which is blending of colors where bands of color from the palette meet up, can be adjusted. Smoothing of 0.0 means the bands will be solid regions of color with no blending between bands."

[node name="spirograph" type="Node" parent="Gener"]
script = ExtResource( 13 )
gener_name = "Spirograph"
gener_description = "[u][b]DESCRIPTION[/b][/u]

A Spirograph, if you've never seen one, is perhaps best explained by the result of a [url=https://www.google.com/search?q=spirograph&tbm=isch][color=aqua]Google image search for the word \"spirograph\"[/color][/url]. Technically, a Spirograph drawing is a curve formed by rotating a moving circular disc against the inner or outer edge of a fixed circluar disc, with a pen fixed at some distance from the center of the moving circle.  [url=http://www.mathematische-basteleien.de/spirographs.htm][color=aqua]This page[/color][/url] contains an excellent explanation of the actual mathematics, and this implementation is based on the formulas presented on that page. (Note: Spirographs generated using moving or fixed discs that have shapes other than circular are possible, but this implementation considers only circular discs.)

[u][b]Generator Options[/b][/u]

The default settings will draw from 1 to 4 spirographs, randomly chosen to be a hypocycloid or epicycloid, overlaid in the same image. The default ranges for the circle radii, position of the pen, number of rotations, and size of the parametric step generate a wide variety of spirograph shapes. For detailed descriptions of all the variables, see [url=http://www.mathematische-basteleien.de/spirographs.htm][color=aqua]this page[/color][/url] from which the mathematics for this implementation were derived.

[u][b]Colors[/b][/u]

If no palette colors are selected, each spirograph curve is drawn in a random color. If palette colors are selected, each spirograph curve is drawn in a color selected randomly from the palette."

[node name="UI" type="PanelContainer" parent="."]
margin_left = 1080.0
margin_right = 1920.0
margin_bottom = 1080.0
theme = SubResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="UIVbox" type="VBoxContainer" parent="UI"]
margin_left = 7.0
margin_top = 7.0
margin_right = 833.0
margin_bottom = 1073.0

[node name="MenuBar" type="PanelContainer" parent="UI/UIVbox"]
margin_right = 826.0
margin_bottom = 45.0
custom_styles/panel = SubResource( 6 )

[node name="MarginContainer" type="MarginContainer" parent="UI/UIVbox/MenuBar"]
margin_right = 826.0
margin_bottom = 45.0
custom_constants/margin_right = 8
custom_constants/margin_top = 8
custom_constants/margin_left = 8
custom_constants/margin_bottom = 8

[node name="HBoxContainer" type="HBoxContainer" parent="UI/UIVbox/MenuBar/MarginContainer"]
margin_left = 8.0
margin_top = 8.0
margin_right = 818.0
margin_bottom = 37.0

[node name="Generate" type="Button" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_right = 117.0
margin_bottom = 29.0
custom_fonts/font = SubResource( 7 )
text = "  GENERATE  "

[node name="Label" type="Label" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 121.0
margin_top = 5.0
margin_right = 158.0
margin_bottom = 24.0
text = "  Grid"

[node name="GridSize" type="SpinBox" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 162.0
margin_right = 236.0
margin_bottom = 29.0
min_value = 1.0
max_value = 16.0
value = 4.0

[node name="Label2" type="Label" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 240.0
margin_top = 5.0
margin_right = 282.0
margin_bottom = 24.0
text = "  Tiley"

[node name="TileySize" type="SpinBox" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 286.0
margin_right = 360.0
margin_bottom = 29.0
min_value = 16.0
max_value = 1024.0
step = 16.0
value = 128.0

[node name="Label3" type="Label" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 364.0
margin_top = 5.0
margin_right = 411.0
margin_bottom = 24.0
text = "  Scale"

[node name="TileyScale" type="SpinBox" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 415.0
margin_right = 489.0
margin_bottom = 29.0
min_value = 0.1
max_value = 64.0
step = 0.1
value = 2.0

[node name="Label4" type="Label" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 493.0
margin_top = 5.0
margin_right = 586.0
margin_bottom = 24.0
text = "  Background"

[node name="Background" type="ColorPickerButton" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 590.0
margin_right = 622.0
margin_bottom = 29.0
text = "     "
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Spacer" type="Label" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 626.0
margin_top = 5.0
margin_right = 753.0
margin_bottom = 24.0
size_flags_horizontal = 3

[node name="Reset" type="Button" parent="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer"]
margin_left = 757.0
margin_right = 810.0
margin_bottom = 29.0
custom_fonts/font = SubResource( 8 )
text = "RESET"

[node name="ControlArea" type="HBoxContainer" parent="UI/UIVbox"]
margin_top = 49.0
margin_right = 826.0
margin_bottom = 1066.0
size_flags_vertical = 3

[node name="InspectorMargin" type="MarginContainer" parent="UI/UIVbox/ControlArea"]
margin_right = 616.0
margin_bottom = 1017.0
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 3.0
custom_constants/margin_right = 2
custom_constants/margin_top = 2

[node name="InspectorPanel" type="PanelContainer" parent="UI/UIVbox/ControlArea/InspectorMargin"]
margin_top = 2.0
margin_right = 614.0
margin_bottom = 1017.0
custom_styles/panel = SubResource( 9 )

[node name="ScrollContainer" type="ScrollContainer" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel"]
margin_right = 614.0
margin_bottom = 1015.0
scroll_horizontal_enabled = false

[node name="InspectorControls" type="VBoxContainer" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer"]
margin_right = 614.0
margin_bottom = 377.0
size_flags_horizontal = 3

[node name="MarginContainer" type="MarginContainer" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls"]
margin_right = 614.0
margin_bottom = 357.0
custom_constants/margin_right = 8
custom_constants/margin_top = 8
custom_constants/margin_left = 8
custom_constants/margin_bottom = 8

[node name="VBoxContainer" type="VBoxContainer" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer"]
margin_left = 8.0
margin_top = 8.0
margin_right = 606.0
margin_bottom = 349.0
custom_constants/separation = 16

[node name="HBoxContainer" type="HBoxContainer" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer"]
margin_right = 598.0
margin_bottom = 25.0
custom_constants/separation = 8

[node name="Label" type="Label" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer/HBoxContainer"]
margin_top = 3.0
margin_right = 79.0
margin_bottom = 22.0
text = "Tiley Gener"

[node name="GenerOption" type="OptionButton" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer/HBoxContainer"]
margin_left = 87.0
margin_right = 488.0
margin_bottom = 25.0
size_flags_horizontal = 3

[node name="Spacer" type="Label" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer/HBoxContainer"]
margin_left = 496.0
margin_top = 3.0
margin_right = 536.0
margin_bottom = 22.0
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.1

[node name="ResetGener" type="Button" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer/HBoxContainer"]
margin_left = 544.0
margin_right = 597.0
margin_bottom = 25.0
custom_fonts/font = SubResource( 10 )
text = "RESET"

[node name="GenerDescription" type="RichTextLabel" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer"]
margin_top = 41.0
margin_right = 598.0
margin_bottom = 341.0
rect_min_size = Vector2( 0, 300 )
custom_fonts/mono_font = SubResource( 11 )
custom_fonts/bold_italics_font = SubResource( 12 )
custom_fonts/italics_font = SubResource( 13 )
custom_fonts/bold_font = SubResource( 14 )
custom_fonts/normal_font = SubResource( 15 )
bbcode_enabled = true

[node name="GenerInspector" type="MarginContainer" parent="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls"]
margin_top = 361.0
margin_right = 614.0
margin_bottom = 377.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/margin_right = 8
custom_constants/margin_top = 8
custom_constants/margin_left = 8
custom_constants/margin_bottom = 8
script = ExtResource( 4 )

[node name="ColorMargin" type="MarginContainer" parent="UI/UIVbox/ControlArea"]
margin_left = 620.0
margin_right = 826.0
margin_bottom = 1017.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/margin_top = 2
custom_constants/margin_left = 2

[node name="ColorPanel" type="PanelContainer" parent="UI/UIVbox/ControlArea/ColorMargin"]
margin_left = 2.0
margin_top = 2.0
margin_right = 206.0
margin_bottom = 1017.0
custom_styles/panel = SubResource( 16 )

[node name="MarginContainer" type="MarginContainer" parent="UI/UIVbox/ControlArea/ColorMargin/ColorPanel"]
margin_right = 204.0
margin_bottom = 1015.0
custom_constants/margin_right = 8
custom_constants/margin_top = 8
custom_constants/margin_left = 8

[node name="Palette" type="VBoxContainer" parent="UI/UIVbox/ControlArea/ColorMargin/ColorPanel/MarginContainer"]
margin_left = 8.0
margin_top = 8.0
margin_right = 196.0
margin_bottom = 1015.0
custom_constants/separation = 12

[node name="PaletteOption" type="OptionButton" parent="UI/UIVbox/ControlArea/ColorMargin/ColorPanel/MarginContainer/Palette"]
margin_right = 188.0
margin_bottom = 25.0
hint_tooltip = "Reselect the same palette to toggle the entire palette on/off"

[node name="RichTextLabel" type="RichTextLabel" parent="UI/UIVbox/ControlArea/ColorMargin/ColorPanel/MarginContainer/Palette"]
margin_top = 37.0
margin_right = 188.0
margin_bottom = 97.0
text = "Reselect the same palette to toggle its colors on/off. Click a color to edit."
fit_content_height = true

[node name="Colors" type="VBoxContainer" parent="UI/UIVbox/ControlArea/ColorMargin/ColorPanel/MarginContainer/Palette"]
margin_top = 109.0
margin_right = 188.0
margin_bottom = 109.0
size_flags_horizontal = 3
custom_constants/separation = 10
[connection signal="file_selected" from="SaveDialog" to="Sprites" method="_on_SaveDialog_file_selected"]
[connection signal="popup_hide" from="SaveDialog" to="Sprites" method="_on_SaveDialog_popup_hide"]
[connection signal="pressed" from="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer/Generate" to="." method="_on_Generate_pressed"]
[connection signal="value_changed" from="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer/GridSize" to="." method="_on_GridSize_value_changed"]
[connection signal="value_changed" from="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer/TileySize" to="." method="_on_TileySize_value_changed"]
[connection signal="value_changed" from="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer/TileyScale" to="." method="_on_TileyScale_value_changed"]
[connection signal="color_changed" from="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer/Background" to="." method="_on_Background_color_changed"]
[connection signal="pressed" from="UI/UIVbox/MenuBar/MarginContainer/HBoxContainer/Reset" to="." method="_on_Reset_pressed"]
[connection signal="item_selected" from="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer/HBoxContainer/GenerOption" to="." method="_on_GenerOption_item_selected"]
[connection signal="pressed" from="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer/HBoxContainer/ResetGener" to="." method="_on_ResetGener_pressed"]
[connection signal="meta_clicked" from="UI/UIVbox/ControlArea/InspectorMargin/InspectorPanel/ScrollContainer/InspectorControls/MarginContainer/VBoxContainer/GenerDescription" to="." method="_on_GenerDescription_meta_clicked"]
[connection signal="button_up" from="UI/UIVbox/ControlArea/ColorMargin/ColorPanel/MarginContainer/Palette/PaletteOption" to="Palettes" method="_on_PaletteOption_button_up"]
[connection signal="item_selected" from="UI/UIVbox/ControlArea/ColorMargin/ColorPanel/MarginContainer/Palette/PaletteOption" to="Palettes" method="_on_PaletteOption_item_selected"]
[connection signal="toggled" from="UI/UIVbox/ControlArea/ColorMargin/ColorPanel/MarginContainer/Palette/PaletteOption" to="Palettes" method="_on_PaletteOption_toggled"]
